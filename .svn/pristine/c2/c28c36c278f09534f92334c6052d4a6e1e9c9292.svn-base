package edu.upenn.cis.cis455.webserver;
import java.io.*;
import java.net.*;
import java.text.*;
import java.util.*;

public class Handler extends Thread{

	private final Queue<Socket> Q;
	public enum methods {
		GET,
		HEAD
	}

	public Handler(Queue<Socket> Q) {
		this.Q = Q;
	}

	public void generate_response(HashMap<String,String> hm, Socket clientSocket) throws IOException {

		DataOutputStream out = new DataOutputStream(clientSocket.getOutputStream());
		methods method = methods.valueOf(hm.get("Method"));
		String header = null;
		Date d = Calendar.getInstance().getTime();
		SimpleDateFormat format = new SimpleDateFormat("EEE, dd MMM yyyy HH:mm:ss z", Locale.US);
		format.setTimeZone(TimeZone.getTimeZone("GMT"));
		String date = format.format(d);
		int content_length = 0;

		if(hm.get("Version")=="HTTP/1.1" && !hm.containsKey("Host")) {
			content_length = 111; //Computed based on the html code for error message
			header = hm.get("Version") + " 400 Bad Request\r\n";
			header += "Content-Type: text/html\r\n";
			header += "Content-Length: " + content_length + "\r\n";
			header += "\n";
			String content = "<html><body>\n<h1>No Host: header received</h1>\nHTTP 1.1 requests must include the Host: header.\n</body></html>";
			out.write(header.getBytes());
			out.write(content.getBytes());
			out.close();
			return;
		}

		switch (method) {

		case GET:

			String filepath = Server.directory + hm.get("Path");
			File f = new File(filepath);
			if(!f.exists()) {
				content_length = 57; //Computed based on the html code for error message
				header = hm.get("Version") + " 404 Not Found\r\n";
				header += "Date: " + date + "\r\n";
				header += "Content-Type: text/html\r\n";
				header += "Content-Length: " + content_length + "\r\n";
				header += "\n";
				String content = "<html><body>\n<h1>404: File Not Found</h1>\n</body></html>";
				out.write(header.getBytes());
				out.write(content.getBytes());
				out.close();
				return;
			}
			if(!f.canRead()) {
				content_length = 59; //Computed based on the html code for error message
				header = hm.get("Version") + " 403 Forbidden\r\n";
				header += "Date: " + date + "\r\n";
				header += "Content-Type: text/html\r\n";
				header += "Content-Length: " + content_length + "\r\n";
				header += "\n";
				String content = "<html><body>\n<h1>403: Forbidden Access</h1>\n</body></html>";
				out.write(header.getBytes());
				out.write(content.getBytes());
				out.close();
				return;
			}
			header = hm.get("Version") + " 200 OK\r\n";
			header += "Date: " + date + "\r\n";
			if(f.isDirectory()) {

			}
			if(f.isFile()) {
				FileInputStream fis = new FileInputStream(filepath);
				if(filepath.endsWith("html")) {
					header += "Content-Type: text/html\r\n";
				}
				if(filepath.endsWith("txt")) {
					header += "Content-Type: text/plain\r\n";
				}
				if(filepath.endsWith("jpg")) {
					header += "Content-Type: image/jpg\r\n";
				}
				if(filepath.endsWith("jpeg")) {
					header += "Content-Type: image/jpeg\r\n";
				}
				if(filepath.endsWith("gif")) {
					header += "Content-Type: image/gif\r\n";
				}
				if(filepath.endsWith("png")) {
					header += "Content-Type: image/png\r\n";
				}
				content_length = fis.available();
				byte[] content = new byte[content_length];
				fis.read(content);
				header += "Content-Length: " + content_length + "\r\n";
				header += "\n";
				System.out.println(header);
				out.write(header.getBytes());
				out.write(content);
				fis.close();
				out.close();
				return;
			}

		case HEAD:

			String filepath1 = Server.directory + hm.get("Path");
			File f1 = new File(filepath1);
			if(!f1.exists()) {
				content_length = 57; //Computed based on the html code for error message
				header = hm.get("Version") + " 404 Not Found\r\n";
				header += "Date: " + date + "\r\n";
				header += "Content-Type: text/html\r\n";
				header += "Content-Length: " + content_length + "\r\n";
				header += "\n";
				out.write(header.getBytes());
				out.close();
				return;
			}
			if(!f1.canRead()) {
				content_length = 59; //Computed based on the html code for error message
				header = hm.get("Version") + " 403 Forbidden\r\n";
				header += "Date: " + date + "\r\n";
				header += "Content-Type: text/html\r\n";
				header += "Content-Length: " + content_length + "\r\n";
				header += "\n";
				out.write(header.getBytes());
				out.close();
				return;
			}
			header = hm.get("Version") + " 200 OK\r\n";
			header += "Date: " + date + "\r\n";
			if(f1.isDirectory()) {

			}
			if(f1.isFile()) {
				FileInputStream fis = new FileInputStream(filepath1);
				if(filepath1.endsWith("html")) {
					header += "Content-Type: text/html\r\n";
				}
				if(filepath1.endsWith("txt")) {
					header += "Content-Type: text/plain\r\n";
				}
				if(filepath1.endsWith("jpg")) {
					header += "Content-Type: image/jpg\r\n";
				}
				if(filepath1.endsWith("jpeg")) {
					header += "Content-Type: image/jpeg\r\n";
				}
				if(filepath1.endsWith("gif")) {
					header += "Content-Type: image/gif\r\n";
				}
				if(filepath1.endsWith("png")) {
					header += "Content-Type: image/png\r\n";
				}
				content_length = fis.available();
				header += "Content-Length: " + content_length + "\r\n";
				header += "\n";
				out.write(header.getBytes());
				fis.close();
				out.close();
			}

		}

	}

	public void run() {
		HashMap<String,String> hm = new HashMap<String,String>();
		while(true) {
			String request = "";
			String[] request_parts;
			synchronized(Q) {
				while(Q.isEmpty()) {
					try {
						Q.wait();
					} catch (InterruptedException e) {
						e.printStackTrace();
					} }
				Socket clientSocket = Q.remove();
				//Process request and send response
				try {
					BufferedReader in = new BufferedReader(new InputStreamReader(clientSocket.getInputStream()));
					request = in.readLine();
					request_parts = request.split(" ");
					hm.put("Method", request_parts[0]);
					hm.put("Path", request_parts[1]);
					hm.put("Version", request_parts[2]);
					hm.put("Thread",Thread.currentThread().toString());
					while(true) {
						request = in.readLine();
						if (request.length() == 0)
							break;
						request_parts = request.split(":");
						hm.put(request_parts[0], request_parts[1]);
					}
					generate_response(hm, clientSocket);
					clientSocket.close();
				}
				catch(IOException e) {
					e.printStackTrace();
				}
				Q.notifyAll();
			}
		}
	}
}
