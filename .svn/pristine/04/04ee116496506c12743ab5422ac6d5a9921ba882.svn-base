package edu.upenn.cis.cis455.webserver;
import java.io.*;
import java.net.*;
import java.nio.file.Path;
import java.nio.file.Paths;
import java.text.*;
import java.util.*;
import org.apache.log4j.Logger;

public class Handler implements Runnable {

	static final Logger logger = Logger.getLogger(HttpServer.class);
	static Set<String> map = new LinkedHashSet<String>();

	private final Queue<Socket> Q;
	private HashMap<String,String> thread_request_map = new HashMap<String,String>();
	public enum methods {GET, HEAD, DEFAULT};
	public ArrayList<String> validversions = new ArrayList<String>();
	public boolean path_ok = true;
	public boolean file_modified = false;
	Date d = Calendar.getInstance().getTime();
	SimpleDateFormat format = new SimpleDateFormat("EEE, dd MMM yyyy HH:mm:ss z", Locale.US);
	String date;
	int count = 0;


	public Handler(Queue<Socket> Q) {
		this.Q = Q;
		format.setTimeZone(TimeZone.getTimeZone("GMT"));
		date = format.format(d);
		validversions.add("HTTP/1.1");
		validversions.add("HTTP/1.0");
	}

	/*public void generate_400_error(HashMap<String,String> hm, Socket clientSocket) throws IOException {
		DataOutputStream out = new DataOutputStream(clientSocket.getOutputStream());
		content = "<html><body>\n<h1>400: Bad Request</h1>\n</body></html>";
		content_length = content.getBytes().length;
		header = hm.get("Version") + " 400 Bad Request\r\n";
		header += "Content-Type: text/html\r\n";
		header += "Content-Length: " + content_length + "\r\n";
		header += "Connection: close\r\n";
		header += "\r\n";
		out.write(header.getBytes());
		out.write(content.getBytes());
		out.flush();
		out.close();
	}

	public void generate_403_error(HashMap<String,String> hm, Socket clientSocket) throws IOException { 
		DataOutputStream out = new DataOutputStream(clientSocket.getOutputStream());
		content_length = 59; //Computed based on the html code for error message
		header = hm.get("Version") + " 403 Forbidden\r\n";
		header += "Date: " + date + "\r\n";
		header += "Content-Type: text/html\r\n";
		header += "Content-Length: " + content_length + "\r\n";
		header += "Connection: close\r\n";
		header += "\r\n";
		content = "<html><body>\n<h1>403: Forbidden Access</h1>\n</body></html>";
		out.write(header.getBytes());
		out.write(content.getBytes());
		out.flush();
		out.close();
	}

	public void generate_404_error(HashMap<String,String> hm, Socket clientSocket) throws IOException {  
		DataOutputStream out = new DataOutputStream(clientSocket.getOutputStream());
		content_length = 57; //Computed based on the html code for error message
		header = hm.get("Version") + " 404 Not Found\r\n";
		header += "Date: " + date + "\r\n";
		header += "Content-Type: text/html\r\n";
		header += "Content-Length: " + content_length + "\r\n";
		header += "Connection: close\r\n";
		header += "\r\n";
		content = "<html><body>\n<h1>404: File Not Found</h1>\n</body></html>";
		out.write(header.getBytes());
		out.write(content.getBytes());
		out.flush();
		out.close();
	}

	public void generate_405_error(HashMap<String,String> hm, Socket clientSocket) throws IOException { 
		DataOutputStream out = new DataOutputStream(clientSocket.getOutputStream());
		header = hm.get("Version") + " 405 Method Not Allowed\r\n";
		header += "Date: " + date + "\r\n";
		header += "Content-Type: text/html\r\n";
		header += "Content-Length: " + content_length + "\r\n";
		header += "Connection: close\r\n";
		header += "\r\n";
		content = "<html><body>\n<h1>405: Method Not Allowed</h1>\n</body></html>";
		content_length = content.getBytes().length;
		out.write(header.getBytes());
		out.write(content.getBytes());
		out.flush();
		out.close();
	}

	public void generate_415_error(HashMap<String,String> hm, Socket clientSocket) throws IOException { 
		DataOutputStream out = new DataOutputStream(clientSocket.getOutputStream());
		header = hm.get("Host") + " 415 Unsupported Media Type\r\n";
		header += "Date: " + date + "\r\n";
		header += "Content-Type: text/html\r\n";
		header += "Content-Length: " + content_length + "\r\n";
		header += "Connection: close\r\n";
		header += "\r\n";
		content = "<html><body>\n<h1>415: Unsupported Media Type</h1>\n</body></html>";
		content_length = content.getBytes().length;
		out.write(header.getBytes());
		out.write(content.getBytes());
		out.flush();
		out.close();
	}

	public void generate_505_error(HashMap<String,String> hm, Socket clientSocket) throws IOException { 
		DataOutputStream out = new DataOutputStream(clientSocket.getOutputStream());
		header = "HTTP/1.1 505 HTTP Version Not Supported\r\n";
		header += "Date: " + date + "\r\n";
		header += "Content-Type: text/html\r\n";
		header += "Content-Length: " + content_length + "\r\n";
		header += "Connection: close\r\n";
		header += "\r\n";
		content = "<html><body>\n<h1>505: HTTP Version Not Supported</h1>\n</body></html>";
		content_length = content.getBytes().length;
		out.write(header.getBytes());
		out.write(content.getBytes());
		out.flush();
		out.close();
	}*/

	public void generate_error_alt(int error, HashMap<String,String> hm, Socket clientSocket) throws IOException {
		String header = "";
		String content = "";
		int content_length = 0;
		DataOutputStream out = new DataOutputStream(clientSocket.getOutputStream());
		switch(error) {
		case 400:
			header = hm.get("Version") + " 400 Bad Request\r\n";
			content = "<html><body>\n<h1>400: Bad Request</h1>\n</body></html>";
			break;

		case 403:
			header = hm.get("Version") + " 403 Forbidden\r\n";
			content = "<html><body>\n<h1>403: Forbidden Access</h1>\n</body></html>";
			break;

		case 404:
			header = hm.get("Version") + " 404 Not Found\r\n";
			content = "<html><body>\n<h1>404: File Not Found</h1>\n</body></html>";
			break;

		case 405:
			header = hm.get("Version") + " 405 Method Not Allowed\r\n";
			content = "<html><body>\n<h1>405: Method Not Allowed</h1>\n</body></html>";
			break;

		case 415:
			header = hm.get("Host") + " 415 Unsupported Media Type\r\n";
			content = "<html><body>\n<h1>415: Unsupported Media Type</h1>\n</body></html>";
			break;

		case 505:
			header = "HTTP/1.1 505 HTTP Version Not Supported\r\n";
			content = "<html><body>\n<h1>505: HTTP Version Not Supported</h1>\n</body></html>";
			break;		
		}
		header += "Date: " + date + "\r\n";
		header += "Content-Type: text/html\r\n";
		header += "Content-Length: " + content_length + "\r\n";
		header += "Connection: close\r\n";
		header += "\r\n";
		content_length = content.getBytes().length;
		out.write(header.getBytes());
		//out.write(content.getBytes());
		out.flush();
		out.close();
	}

	public void generate_response_file_alt(HashMap<String,String> hm, Socket clientSocket, File f) throws IOException {
		String header = "";
		String content = "";
		int content_length = 0;
		DataOutputStream out = new DataOutputStream(clientSocket.getOutputStream());
		String filepath = f.getAbsolutePath();
		FileInputStream fis = new FileInputStream(filepath);
		header = hm.get("Version") + " 200 OK\r\n";
		header += "Date: " + date + "\r\n";
		if(filepath.endsWith("html")) {
			header += "Content-Type: text/html\r\n";
		}
		else if(filepath.endsWith("txt")) {
			header += "Content-Type: text/plain\r\n";
		}
		else if(filepath.endsWith("jpg")) {
			header += "Content-Type: image/jpg\r\n";
		}
		else if(filepath.endsWith("jpeg")) {
			header += "Content-Type: image/jpeg\r\n";
		}
		else if(filepath.endsWith("gif")) {
			header += "Content-Type: image/gif\r\n";
		}
		else if(filepath.endsWith("png")) {
			header += "Content-Type: image/png\r\n";
		}
		else {
			generate_error_alt(415, hm, clientSocket);
			fis.close();
			return;
		}
		content_length = fis.available();
		byte[] b = new byte[content_length];
		fis.read(b);
		header += "Content-Length: " + content_length + "\r\n";
		header += "Connection: close\r\n";
		header += "\r\n";
		out.write(header.getBytes());
		//out.write(b);
		out.flush();
		fis.close();
		out.close();
	}

	public void generate_response_directory_alt(HashMap<String,String> hm, Socket clientSocket, File f) throws IOException {
		String header = "";
		int content_length = 0;
		DataOutputStream out = new DataOutputStream(clientSocket.getOutputStream());
		header = hm.get("Version") + " 200 OK\r\n";
		header += "Date: " + date + "\r\n";
		header += "Content-Type: text/html\r\n";
		File[] contents = f.listFiles();
		String page_content = "<html>\n<body>\n<h1 style=\"text-align:center\"><b>\"JerryMouse\" Server</b></h1><hr>\n<h2>Contents  of  <a href=\"http://" + hm.get("Host") + "/\">ROOT</a> / ";
		String links[] = hm.get("Path").split("/");
		for (int i=2; i<links.length+1; i++) {
			String href = hm.get("Host");
			for (int j = 1; j<i; j++) {
				href += "/" + links[j];
			}
			page_content += "<a href=\"http://" + href + "\">" + links[i-1] + "</a> / ";
		}
		page_content += "</h2>\n<table cellspacing=\"30\"><tr><th>Name</th><th>Type</th><th>Size</th><th>Last Modified</th></tr>";
		for(File s: contents) {
			int l = Server.directory.length();
			String abs = s.getAbsolutePath();
			String relative_path = abs.substring(l, abs.length());
			page_content += "<tr><td><a href=\"http://";
			page_content += hm.get("Host") + relative_path;
			page_content += "\">" + s.getName() + "</a></td><td>";
			if (s.isDirectory())
				page_content += "Sub-Directory</td><td>N/A</td><td>";
			else {
				if (s.getName().endsWith("jpeg") || s.getName().endsWith("jpg") || s.getName().endsWith("gif") || s.getName().endsWith("png"))
					page_content += "Image</td><td>";
				else if (s.getName().endsWith("html"))
					page_content += "HTML File</td><td>";
				else if (s.getName().endsWith("txt"))
					page_content += "Text File</td><td>";
				else
					page_content += "Unknown</td><td>";
				FileInputStream fis = new FileInputStream(s.getAbsolutePath());
				page_content += fis.available() + " B</td><td>";
				fis.close();
			}
			SimpleDateFormat sdf = new SimpleDateFormat("MM/dd/yyyy HH:mm:ss");
			page_content += sdf.format(s.lastModified()) + "</td></tr>";
		}
		page_content += "</table></body></html>";
		content_length = page_content.length();
		header += "Content-Length: " + content_length + "\r\n";
		header += "Connection: close\r\n";
		header += "\r\n";
		out.write(header.getBytes());
		//out.write(page_content.getBytes());
		out.flush();
		out.close();
	}

	public void generate_control_page_alt(HashMap<String,String> hm, Socket clientSocket) throws IOException {
		String header = "";
		String content = "";
		int content_length = 0;
		DataOutputStream out = new DataOutputStream(clientSocket.getOutputStream());
		content = "<html><body>\n<h1 style=\"text-align:center\">Control Panel</h1>\n<hr>\nFull Name: Kaushik Yasaswy Suryanarayana<br>SEAS Login: kaus\n<hr>\n";
		content += "<table cellspacing = \"20\"><tr><th>Thread</th><th>Status</th></tr>";
		for(Thread t : Server.threadpool) {
			content += "<tr><td align=\"center\">" + t.getName() + "</td><td align=\"center\">";
			if (t.getState() == Thread.State.RUNNABLE) { 
				content += thread_request_map.get(t.getName()); //Get the URL the thread is servicing
			}
			else
				content += t.getState().toString(); //Get the state of the thread otherwise
			content += "</td></tr>";
		}
		content += "</table><hr><button type=\"button\" onclick=\"location.href='http://" + hm.get("Host") + "/shutdown'\">Shutdown Server</button>";
		content += "</body></html>";
		byte[] b = content.getBytes();
		content_length = b.length;
		header = hm.get("Version") + " 200 OK\r\n";
		header += "Content-Type: text/html\r\n";
		header += "Content-Length: " + content_length + "\r\n";
		header += "Connection: close\r\n";
		header += "\r\n";
		out.write(header.getBytes());
		//out.write(b);
		out.close();
	}

	public void generate_shutdown_page_alt(HashMap<String,String> hm, Socket clientSocket) throws IOException {
		String header = "";
		String content = "";
		int content_length = 0;
		DataOutputStream out = new DataOutputStream(clientSocket.getOutputStream());
		Server.alive = false;
		Server.serverSocket.close();
		content = "<html><body>\n<h1 style=\"text-align:center\">The Server is going to shutdown now. Goodbye!</h1>";
		content += "</body></html>";
		content_length = content.getBytes().length;
		header = hm.get("Version") + " 200 OK\r\n";
		header += "Content-Type: text/html\r\n";
		header += "Content-Length: " + content_length + "\r\n";
		header += "Connection: close\r\n";
		header += "\r\n";
		out.write(header.getBytes());
		//out.write(content.getBytes());
		out.flush();
		out.close();
	}

	public void generate_error(int error, HashMap<String,String> hm, Socket clientSocket) throws IOException {
		String header = "";
		String content = "";
		int content_length = 0;
		DataOutputStream out = new DataOutputStream(clientSocket.getOutputStream());
		switch(error) {
		case 400:
			header = hm.get("Version") + " 400 Bad Request\r\n";
			content = "<html><body>\n<h1>400: Bad Request</h1>\n</body></html>";
			break;

		case 403:
			header = hm.get("Version") + " 403 Forbidden\r\n";
			content = "<html><body>\n<h1>403: Forbidden Access</h1>\n</body></html>";
			break;

		case 404:
			header = hm.get("Version") + " 404 Not Found\r\n";
			content = "<html><body>\n<h1>404: File Not Found</h1>\n</body></html>";
			break;

		case 405:
			header = hm.get("Version") + " 405 Method Not Allowed\r\n";
			content = "<html><body>\n<h1>405: Method Not Allowed</h1>\n</body></html>";
			break;

		case 415:
			header = hm.get("Host") + " 415 Unsupported Media Type\r\n";
			content = "<html><body>\n<h1>415: Unsupported Media Type</h1>\n</body></html>";
			break;

		case 505:
			header = "HTTP/1.1 505 HTTP Version Not Supported\r\n";
			content = "<html><body>\n<h1>505: HTTP Version Not Supported</h1>\n</body></html>";
			break;		
		}
		header += "Date: " + date + "\r\n";
		header += "Content-Type: text/html\r\n";
		header += "Content-Length: " + content_length + "\r\n";
		header += "Connection: close\r\n";
		header += "\r\n";
		content_length = content.getBytes().length;
		out.write(header.getBytes());
		out.write(content.getBytes());
		out.flush();
		out.close();
	}

	public void generate_response_file(HashMap<String,String> hm, Socket clientSocket, File f) throws IOException {
		String header = "";
		String content = "";
		int content_length = 0;
		DataOutputStream out = new DataOutputStream(clientSocket.getOutputStream());
		String filepath = f.getAbsolutePath();
		FileInputStream fis = new FileInputStream(filepath);
		header = hm.get("Version") + " 200 OK\r\n";
		header += "Date: " + date + "\r\n";
		if(filepath.endsWith("html")) {
			header += "Content-Type: text/html\r\n";
		}
		else if(filepath.endsWith("txt")) {
			header += "Content-Type: text/plain\r\n";
		}
		else if(filepath.endsWith("jpg")) {
			header += "Content-Type: image/jpg\r\n";
		}
		else if(filepath.endsWith("jpeg")) {
			header += "Content-Type: image/jpeg\r\n";
		}
		else if(filepath.endsWith("gif")) {
			header += "Content-Type: image/gif\r\n";
		}
		else if(filepath.endsWith("png")) {
			header += "Content-Type: image/png\r\n";
		}
		else {
			generate_error(415, hm, clientSocket);
			fis.close();
			return;
		}
		content_length = fis.available();
		byte[] b = new byte[content_length];
		fis.read(b);
		header += "Content-Length: " + content_length + "\r\n";
		header += "Connection: close\r\n";
		header += "\r\n";
		out.write(header.getBytes());
		out.write(b);
		out.flush();
		fis.close();
		out.close();
	}

	public void generate_response_directory(HashMap<String,String> hm, Socket clientSocket, File f) throws IOException {
		String header = "";
		String content = "";
		int content_length = 0;
		DataOutputStream out = new DataOutputStream(clientSocket.getOutputStream());
		header = hm.get("Version") + " 200 OK\r\n";
		header += "Date: " + date + "\r\n";
		header += "Content-Type: text/html\r\n";
		File[] contents = f.listFiles();
		String page_content = "<html>\n<body>\n<h1 style=\"text-align:center\"><b>\"JerryMouse\" Server</b></h1><hr>\n<h2>Contents  of  <a href=\"http://" + hm.get("Host") + "/\">ROOT</a> / ";
		String links[] = hm.get("Path").split("/");
		for (int i=2; i<links.length+1; i++) {
			String href = hm.get("Host");
			for (int j = 1; j<i; j++) {
				href += "/" + links[j];
			}
			page_content += "<a href=\"http://" + href + "\">" + links[i-1] + "</a> / ";
		}
		page_content += "</h2>\n<table cellspacing=\"30\"><tr><th>Name</th><th>Type</th><th>Size</th><th>Last Modified</th></tr>";
		for(File s: contents) {
			int l = Server.directory.length();
			String abs = s.getAbsolutePath();
			String relative_path = abs.substring(l, abs.length());
			page_content += "<tr><td><a href=\"http://";
			page_content += hm.get("Host") + relative_path;
			page_content += "\">" + s.getName() + "</a></td><td>";
			if (s.isDirectory())
				page_content += "Sub-Directory</td><td>N/A</td><td>";
			else {
				if (s.getName().endsWith("jpeg") || s.getName().endsWith("jpg") || s.getName().endsWith("gif") || s.getName().endsWith("png"))
					page_content += "Image</td><td>";
				else if (s.getName().endsWith("html"))
					page_content += "HTML File</td><td>";
				else if (s.getName().endsWith("txt"))
					page_content += "Text File</td><td>";
				else
					page_content += "Unknown</td><td>";
				FileInputStream fis = new FileInputStream(s.getAbsolutePath());
				page_content += fis.available() + " B</td><td>";
				fis.close();
			}
			SimpleDateFormat sdf = new SimpleDateFormat("MM/dd/yyyy HH:mm:ss");
			page_content += sdf.format(s.lastModified()) + "</td></tr>";
		}
		page_content += "</table></body></html>";
		content_length = page_content.length();
		header += "Content-Length: " + content_length + "\r\n";
		header += "Connection: close\r\n";
		header += "\r\n";
		out.write(header.getBytes());
		out.write(page_content.getBytes());
		out.flush();
		out.close();
	}

	public void generate_control_page(HashMap<String,String> hm, Socket clientSocket) throws IOException {
		String header = "";
		String content = "";
		int content_length = 0;
		DataOutputStream out = new DataOutputStream(clientSocket.getOutputStream());
		content = "<html><body>\n<h1 style=\"text-align:center\">Control Panel</h1>\n<hr>\nFull Name: Kaushik Yasaswy Suryanarayana<br>SEAS Login: kaus\n<hr>\n";
		content += "<table cellspacing = \"20\"><tr><th>Thread</th><th>Status</th></tr>";
		for(Thread t : Server.threadpool) {
			content += "<tr><td align=\"center\">" + t.getName() + "</td><td align=\"center\">";
			if (t.getState() == Thread.State.RUNNABLE) { 
				content += thread_request_map.get(t.getName()); //Get the URL the thread is servicing
			}
			else
				content += t.getState().toString(); //Get the state of the thread otherwise
			content += "</td></tr>";
		}
		content += "</table><hr><button type=\"button\" onclick=\"location.href='http://" + hm.get("Host") + "/shutdown'\"><b>Shutdown Server</b></button>";
		content += "</body></html>";
		byte[] b = content.getBytes();
		content_length = b.length;
		header = hm.get("Version") + " 200 OK\r\n";
		header += "Content-Type: text/html\r\n";
		header += "Content-Length: " + content_length + "\r\n";
		header += "Connection: close\r\n";
		header += "\r\n";
		out.write(header.getBytes());
		out.write(b);
		out.close();
	}

	public void generate_shutdown_page(HashMap<String,String> hm, Socket clientSocket) throws IOException {
		String header = "";
		String content = "";
		int content_length = 0;
		DataOutputStream out = new DataOutputStream(clientSocket.getOutputStream());
		Server.alive = false;
		Server.serverSocket.close();
		content = "<html><body>\n<h1 style=\"text-align:center\">The Server is going to shutdown now. Goodbye!</h1>";
		content += "</body></html>";
		content_length = content.getBytes().length;
		header = hm.get("Version") + " 200 OK\r\n";
		header += "Content-Type: text/html\r\n";
		header += "Content-Length: " + content_length + "\r\n";
		header += "Connection: close\r\n";
		header += "\r\n";
		out.write(header.getBytes());
		out.write(content.getBytes());
		out.flush();
		out.close();
	}

	public String check_if_modified(HashMap<String,String> hm, Socket clientSocket, File f, int i) throws ParseException {
		SimpleDateFormat f1 = new SimpleDateFormat("EEE, dd MMM yyyy HH:mm:ss zzz");
		SimpleDateFormat f2 = new SimpleDateFormat("E, dd-MMM-yyyy HH:mm:ss zzz");
		SimpleDateFormat f3 = new SimpleDateFormat("E MMM d HH:mm:ss yyyy");
		String head_date;
		if (i==1)
			head_date = hm.get("If-Modified-Since");
		else
			head_date = hm.get("If-Unmodified-Since");
		Date header_date;
		if (head_date.contains(","))
			if (head_date.split(",")[0].length() == 3)
				header_date = f1.parse(head_date);
			else
				header_date = f2.parse(head_date);
		else
			header_date = f3.parse(head_date);
		String filedate = new SimpleDateFormat("EEE MMM dd HH:mm:ss zzz yyyy").format(new Date(f.lastModified()));
		Date file_date = new SimpleDateFormat("EEE MMM dd HH:mm:ss zzz yyyy").parse(filedate);
		if (!header_date.before(file_date))
			return f1.format(header_date);
		else {
			file_modified = true;
			return date;
		}
	}


	public void generate_response(HashMap<String,String> hm, Socket clientSocket) throws IOException, ParseException {

		String header = "";
		String content = "";
		int content_length = 0;
		methods method;
		try {
			method = methods.valueOf(hm.get("Method"));
		}
		catch (IllegalArgumentException e) {
			method = methods.valueOf("DEFAULT");
		}

		//Error 400: Bad Request - When the version is 1.1 but does not contain a Host field
		if(hm.get("Version").toString().equals(new String("HTTP/1.1")) && !hm.containsKey("Host")) {
			generate_error(400, hm, clientSocket);
			return;
		}

		//Handling absolute URLs
		String path = hm.get("Path");
		if (path.startsWith("http")) {
			String[] path_parts = path.split(hm.get("Host"));
			hm.put("Path",path_parts[1]);
		}

		if (hm.containsKey("Host"))
			thread_request_map.put(Thread.currentThread().getName(),hm.get("Host").toString()+hm.get("Path").toString());
		else { //Case when HTTP/1.0 and no Host field request for control page
			String host = clientSocket.getLocalAddress().getHostName() + ":" + clientSocket.getLocalPort();
			thread_request_map.put(Thread.currentThread().getName(),host + hm.get("Path").toString());
		}

		//Inspect the method in the request header
		switch (method) {

		case GET:

			//If the request is for the control page
			if (hm.get("Path").equals(new String("/control"))) {
				generate_control_page(hm, clientSocket);
				return;	
			}
			//If the request is for the shutdown page
			if (hm.get("Path").equals(new String("/shutdown"))) {
				//logger.info("Received a request for shutdown");
				generate_shutdown_page(hm, clientSocket);
				return;	
			}
			String filepath = Server.directory + hm.get("Path");
			filepath = simplify_path(filepath);
			if (!path_ok) {
				generate_error(403, hm, clientSocket);
				path_ok = true;
				return;
			}
			File f = new File(filepath);
			//If the resource does not exist
			if(!f.exists()) {
				generate_error(404, hm, clientSocket);
				return;
			}
			//If the resource does not have read permissions
			if(!f.canRead()) {
				generate_error(403, hm, clientSocket);
				return;
			}
			String new_date = null;
			if (hm.containsKey("If-Modified-Since")) {
				new_date = check_if_modified(hm, clientSocket, f, 1);
				if (!file_modified) {
					DataOutputStream out = new DataOutputStream(clientSocket.getOutputStream());
					header = "HTTP/1.1 304 Not Modified\r\n";
					header += "Date: "+new_date+"\r\n";
					header += "\r\n";
					out.write(header.getBytes());
					out.close();
					return;
				}
			}
			if (hm.containsKey("If-Unmodified-Since")) {
				new_date = check_if_modified(hm, clientSocket, f, 2);
				if (file_modified) {
					DataOutputStream out = new DataOutputStream(clientSocket.getOutputStream());
					header = "HTTP/1.1 412 Precondition Failed\r\n";
					header += "\r\n";
					out.write(header.getBytes());
					out.close();
					return;
				}
			}
			//If the requested resource is a directory
			if(f.isDirectory()) {
				generate_response_directory(hm, clientSocket, f);
				return;
			}
			//If the requested resource is a file
			if(f.isFile()) {
				generate_response_file(hm, clientSocket, f);
				return;
			}
			break;

		case HEAD:

			//If the request is for the control page
			if (hm.get("Path").equals(new String("/control"))) {
				generate_control_page_alt(hm, clientSocket);
				return;	
			}
			//If the request is for the shutdown page
			if (hm.get("Path").equals(new String("/shutdown"))) {
				generate_shutdown_page_alt(hm, clientSocket);
				return;	
			}
			String filepath1 = Server.directory + hm.get("Path");
			filepath1 = simplify_path(filepath1);
			if (!path_ok) {
				generate_error_alt(403, hm, clientSocket);
				path_ok = true;
				return;
			}
			File f1 = new File(filepath1);
			//If the resource does not exist
			if(!f1.exists()) {
				generate_error_alt(404, hm, clientSocket);
				return;
			}
			//If the resource does not have read permissions
			if(!f1.canRead()) {
				generate_error_alt(403, hm, clientSocket);
				return;
			}
			if (hm.containsKey("If-Unmodified-Since")) {
				check_if_modified(hm, clientSocket, f1, 2);
				if (file_modified) {
					DataOutputStream out = new DataOutputStream(clientSocket.getOutputStream());
					header = "HTTP/1.1 412 Precondition Failed\r\n";
					header += "\r\n";
					out.write(header.getBytes());
					out.close();
					return;
				}
			}
			//If the requested resource is a directory
			if(f1.isDirectory()) {
				generate_response_directory_alt(hm, clientSocket, f1);
				return;
			}
			//If the requested resource is a file
			if(f1.isFile()) {
				generate_response_file_alt(hm, clientSocket, f1);
				return;
			}
			break;

		case DEFAULT:

			generate_error(405, hm, clientSocket);
			return;

		}

	}

	//Validating the path
	public String simplify_path(String s) throws UnsupportedEncodingException { 
		s = URLDecoder.decode(s, "UTF-8");
		Path p = Paths.get(s);
		s = p.normalize().toString();
		String[] home_directory_parts = Server.directory.split("/");
		String home = home_directory_parts[home_directory_parts.length-1];
		if (!s.contains(home))
			path_ok = false;
		return s;
	}

	public void run() {
		while(Server.alive) { //Loop until a command for shutdown was received
			HashMap<String,String> hm = new HashMap<String,String>();
			String request = "";
			String[] request_parts;
			Socket clientSocket;
			synchronized(Q) {
				while(Q.isEmpty()) {
					try {
						if(Server.alive == false)
							break;
						Q.wait();
					} catch (InterruptedException e) {
						//logger.error("Exception as thread was interrupted");
					} 
				}
				if(Server.alive == false)
					break;
				clientSocket = Q.remove();
				//logger.info(Thread.currentThread().getName() + " read request from the queue. Queue size is now " + Q.size());
				//Q.notify();
			}
			try {
				BufferedReader in = new BufferedReader(new InputStreamReader(clientSocket.getInputStream()));
				request = in.readLine();
				if (request == null) {
					continue;
				}
				if (request.trim().length() == 0) { //Null request
					generate_error(400, hm, clientSocket);
					in.close();
					clientSocket.close();
					break;
				}
				request_parts = request.split(" ");
				if (!validversions.contains(request_parts[2])) { //HTTP version not supported
					generate_error(505, hm, clientSocket);
					in.close();
					clientSocket.close();
					break;
				}
				hm.put("Method", request_parts[0]);
				hm.put("Path", request_parts[1]);
				hm.put("Version", request_parts[2]);
				while(true) {
					request = in.readLine();
					if (request.length() == 0)
						break;
					request_parts = request.split(": ");
					hm.put(request_parts[0], request_parts[1]);
				}
				generate_response(hm, clientSocket);
				in.close();
				clientSocket.close();
				//logger.info(Thread.currentThread().getName() + " is done serving the request");
			}
			catch(Exception e) {
				//logger.error("Exception in the run method"); 
			}
		}
		//logger.info(Thread.currentThread().getName() + " is about to exit");
	}
}
