package edu.upenn.cis.cis455.webserver;
import java.io.*;
import java.net.*;
import java.text.*;
import java.util.*;

public class Handler extends Thread{

	private final Queue<Socket> Q;
	private HashMap<String,String> thread_request_map = new HashMap<String,String>();
	public enum methods {
		GET,
		HEAD
	}

	public Handler(Queue<Socket> Q) {
		this.Q = Q;
	}

	public void generate_response(HashMap<String,String> hm, Socket clientSocket) throws IOException {

		DataOutputStream out = new DataOutputStream(clientSocket.getOutputStream());
		methods method = methods.valueOf(hm.get("Method"));
		String header = null;
		Date d = Calendar.getInstance().getTime();
		SimpleDateFormat format = new SimpleDateFormat("EEE, dd MMM yyyy HH:mm:ss z", Locale.US);
		format.setTimeZone(TimeZone.getTimeZone("GMT"));
		String date = format.format(d);
		int content_length = 0;

		if(hm.get("Version")=="HTTP/1.1" && !hm.containsKey("Host")) {
			content_length = 111; //Computed based on the html code for error message
			header = hm.get("Version") + " 400 Bad Request\r\n";
			header += "Content-Type: text/html\r\n";
			header += "Content-Length: " + content_length + "\r\n";
			header += "\n";
			String content = "<html><body>\n<h1>No Host: header received</h1>\nHTTP 1.1 requests must include the Host: header.\n</body></html>";
			out.write(header.getBytes());
			out.write(content.getBytes());
			out.close();
			return;
		}

		switch (method) {

		case GET:

			if (hm.get("Path").equals(new String("/control"))) {
				String content = "<html><body>\n<h1 style=\"text-align:center\">Control Panel</h1>\n<hr>\nFull Name: Kaushik Yasaswy Suryanarayana<br>SEAS Login: kaus\n<hr>\n";
				content += "<table cellspacing = \"20\"><tr><th>Thread</th><th>Status</th></tr>";
				for(Thread t : Server.threadpool) {
					content += "<tr><td>" + t.getName() + "</td><td>";
					if (t.getState() == Thread.State.RUNNABLE) {
						content += thread_request_map.get(t.getName());
					}
					else
						content += t.getState().toString();
					content += "</td></tr>";
				}
				content += "</table><hr><button type=\"button\" onclick=\"location.href='http://" + hm.get("Host") + "/shutdown'\">Shutdown Server</button>";
				content += "</body></html>";
				content_length = content.getBytes().length;
				header = hm.get("Version") + " 200 OK\r\n";
				header += "Content-Type: text/html\r\n";
				header += "Content-Length: " + content_length + "\r\n";
				header += "\n";
				out.write(header.getBytes());
				out.write(content.getBytes());
				out.close();
				return;	
			}
			if (hm.get("Path").equals(new String("/shutdown"))) {
				Server.alive = false;
				String content = "<html><body>\n<h1 style=\"text-align:center\">The Server is going to shutdown now. Goodbye!</h1>";
				content += "</body></html>";
				content_length = content.getBytes().length;
				header = hm.get("Version") + " 200 OK\r\n";
				header += "Content-Type: text/html\r\n";
				header += "Content-Length: " + content_length + "\r\n";
				header += "\n";
				out.write(header.getBytes());
				out.write(content.getBytes());
				out.close();
				return;	
			}
			String filepath = Server.directory + hm.get("Path");
			File f = new File(filepath);
			if(!f.exists()) {
				content_length = 57; //Computed based on the html code for error message
				header = hm.get("Version") + " 404 Not Found\r\n";
				header += "Date: " + date + "\r\n";
				header += "Content-Type: text/html\r\n";
				header += "Content-Length: " + content_length + "\r\n";
				header += "\n";
				String content = "<html><body>\n<h1>404: File Not Found</h1>\n</body></html>";
				out.write(header.getBytes());
				out.write(content.getBytes());
				out.close();
				return;
			}
			if(!f.canRead()) {
				content_length = 59; //Computed based on the html code for error message
				header = hm.get("Version") + " 403 Forbidden\r\n";
				header += "Date: " + date + "\r\n";
				header += "Content-Type: text/html\r\n";
				header += "Content-Length: " + content_length + "\r\n";
				header += "\n";
				String content = "<html><body>\n<h1>403: Forbidden Access</h1>\n</body></html>";
				out.write(header.getBytes());
				out.write(content.getBytes());
				out.close();
				return;
			}
			header = hm.get("Version") + " 200 OK\r\n";
			header += "Date: " + date + "\r\n";
			if(f.isDirectory()) {
				header += "Content-Type: text/html\r\n";
				File[] contents = f.listFiles();
				String page_content = "<html>\n<body bgcolor=\"Snow\">\n<h1 style=\"text-align:center\"><b>\"JerryMouse\" Server</b></h1><hr>\n<h2>Contents  of  <a href=\"http://" + hm.get("Host") + "/\">ROOT</a> / ";
				String links[] = hm.get("Path").split("/");
				for (int i=2; i<links.length+1; i++) {
					String href = hm.get("Host");
					for (int j = 1; j<i; j++) {
						href += "/" + links[j];
					}
					page_content += "<a href=\"http://" + href + "\">" + links[i-1] + "</a> / ";
				}
				page_content += "</h2>\n<table cellspacing=\"30\"><tr><th>Name</th><th>Type</th><th>Size</th><th>Last Modified</th></tr>";
				for(File s: contents) {
					int l = Server.directory.length();
					String abs = s.getAbsolutePath();
					String relative_path = abs.substring(l, abs.length());
					page_content += "<tr><td><a href=\"http://";
					page_content += hm.get("Host") + relative_path;
					page_content += "\">" + s.getName() + "</a></td><td>";
					if (s.isDirectory())
						page_content += "Sub-Directory</td><td>N/A</td><td>";
					else {
						if (s.getName().endsWith("jpeg") || s.getName().endsWith("jpg") || s.getName().endsWith("gif") || s.getName().endsWith("png"))
							page_content += "Image</td><td>";
						else if (s.getName().endsWith("html"))
							page_content += "HTML File</td><td>";
						else if (s.getName().endsWith("txt"))
							page_content += "Text File</td><td>";
						else
							page_content += "Unknown</td><td>";
						FileInputStream fis = new FileInputStream(s.getAbsolutePath());
						page_content += fis.available() + " B</td><td>";
						fis.close();
					}
					SimpleDateFormat sdf = new SimpleDateFormat("MM/dd/yyyy HH:mm:ss");
					page_content += sdf.format(s.lastModified()) + "</td></tr>";
				}
				page_content += "</table></body></html>";
				content_length = page_content.length();
				header += "Content-Length: " + content_length + "\r\n";
				header += "\n";
				out.write(header.getBytes());
				out.write(page_content.getBytes());
				out.close();
				return;
			}
			if(f.isFile()) {
				FileInputStream fis = new FileInputStream(filepath);
				if(filepath.endsWith("html")) {
					header += "Content-Type: text/html\r\n";
				}
				if(filepath.endsWith("txt")) {
					header += "Content-Type: text/plain\r\n";
				}
				if(filepath.endsWith("jpg")) {
					header += "Content-Type: image/jpg\r\n";
				}
				if(filepath.endsWith("jpeg")) {
					header += "Content-Type: image/jpeg\r\n";
				}
				if(filepath.endsWith("gif")) {
					header += "Content-Type: image/gif\r\n";
				}
				if(filepath.endsWith("png")) {
					header += "Content-Type: image/png\r\n";
				}
				content_length = fis.available();
				byte[] content = new byte[content_length];
				fis.read(content);
				header += "Content-Length: " + content_length + "\r\n";
				header += "\n";
				out.write(header.getBytes());
				out.write(content);
				fis.close();
				out.close();
				return;
			}

		case HEAD:

			String filepath1 = Server.directory + hm.get("Path");
			File f1 = new File(filepath1);
			if(!f1.exists()) {
				content_length = 57; //Computed based on the html code for error message
				header = hm.get("Version") + " 404 Not Found\r\n";
				header += "Date: " + date + "\r\n";
				header += "Content-Type: text/html\r\n";
				header += "Content-Length: " + content_length + "\r\n";
				header += "\n";
				out.write(header.getBytes());
				out.close();
				return;
			}
			if(!f1.canRead()) {
				content_length = 59; //Computed based on the html code for error message
				header = hm.get("Version") + " 403 Forbidden\r\n";
				header += "Date: " + date + "\r\n";
				header += "Content-Type: text/html\r\n";
				header += "Content-Length: " + content_length + "\r\n";
				header += "\n";
				out.write(header.getBytes());
				out.close();
				return;
			}
			header = hm.get("Version") + " 200 OK\r\n";
			header += "Date: " + date + "\r\n";
			if(f1.isDirectory()) {
				header += "Content-Type: text/html\r\n";
				File[] contents = f1.listFiles();
				String page_content = "<html>\n<body bgcolor=\"FloralWhite\">\n<h1 style=\"text-align:center\"><b>\"JerryMouse\" Server</b></h1><hr>\n<p>Contents  of  <a href=\"http://" + hm.get("Host") + "/\">ROOT</a> / ";
				String links[] = hm.get("Path").split("/");
				for (int i=2; i<links.length+1; i++) {
					String href = hm.get("Host");
					for (int j = 1; j<i; j++) {
						href += "/" + links[j];
					}
					page_content += "<a href=\"http://" + href + "\">" + links[i-1] + "</a> / ";
				}
				page_content += "</p>\n<table cellspacing=\"30\"><tr><th>Name</th><th>Type</th><th>Size</th><th>Last Modified</th></tr>";
				for(File s: contents) {
					int l = Server.directory.length();
					String abs = s.getAbsolutePath();
					String relative_path = abs.substring(l, abs.length());
					page_content += "<tr><td><a href=\"http://";
					page_content += hm.get("Host") + relative_path;
					page_content += "\">" + s.getName() + "</a></td><td>";
					if (s.isDirectory())
						page_content += "Sub-Directory</td><td>N/A</td><td>";
					else {
						if (s.getName().endsWith("jpeg") || s.getName().endsWith("jpg") || s.getName().endsWith("gif") || s.getName().endsWith("png"))
							page_content += "Image</td><td>";
						else if (s.getName().endsWith("html"))
							page_content += "HTML File</td><td>";
						else if (s.getName().endsWith("txt"))
							page_content += "Text File</td><td>";
						else
							page_content += "Unknown</td><td>";
						FileInputStream fis = new FileInputStream(s.getAbsolutePath());
						page_content += fis.available() + " B</td><td>";
						fis.close();
					}
					SimpleDateFormat sdf = new SimpleDateFormat("MM/dd/yyyy HH:mm:ss");
					page_content += sdf.format(s.lastModified()) + "</td></tr>";
				}
				page_content += "</table></body></html>";
				content_length = page_content.length();
				header += "Content-Length: " + content_length + "\r\n";
				header += "\n";
				out.write(header.getBytes());
				out.close();
				return;
			}
			if(f1.isFile()) {
				FileInputStream fis = new FileInputStream(filepath1);
				if(filepath1.endsWith("html")) {
					header += "Content-Type: text/html\r\n";
				}
				if(filepath1.endsWith("txt")) {
					header += "Content-Type: text/plain\r\n";
				}
				if(filepath1.endsWith("jpg")) {
					header += "Content-Type: image/jpg\r\n";
				}
				if(filepath1.endsWith("jpeg")) {
					header += "Content-Type: image/jpeg\r\n";
				}
				if(filepath1.endsWith("gif")) {
					header += "Content-Type: image/gif\r\n";
				}
				if(filepath1.endsWith("png")) {
					header += "Content-Type: image/png\r\n";
				}
				content_length = fis.available();
				header += "Content-Length: " + content_length + "\r\n";
				header += "\n";
				out.write(header.getBytes());
				fis.close();
				out.close();
			}

		}

	}

	public void run() {
		HashMap<String,String> hm = new HashMap<String,String>();
		while(true) {
			String request = "";
			String[] request_parts;
			synchronized(Q) {
				while(Q.isEmpty()) {
					try {
						if(Server.alive == false)
							break;
						Q.wait();
					} catch (InterruptedException e) {
						e.printStackTrace();
					} 
				}
				if(Q.isEmpty() && Server.alive == false) {
					try {
						Server.serverSocket.close();
					} catch (IOException e) {
						e.printStackTrace();
					}
					break;
				}
				Socket clientSocket = Q.remove();
				try {
					BufferedReader in = new BufferedReader(new InputStreamReader(clientSocket.getInputStream()));
					request = in.readLine();
					request_parts = request.split(" ");
					hm.put("Method", request_parts[0]);
					hm.put("Path", request_parts[1]);
					hm.put("Version", request_parts[2]);
					thread_request_map.put(Thread.currentThread().getName(),request_parts[1]);
					while(true) {
						request = in.readLine();
						if (request.length() == 0)
							break;
						request_parts = request.split(": ");
						hm.put(request_parts[0], request_parts[1]);
					}
					generate_response(hm, clientSocket);
					thread_request_map.remove(Thread.currentThread().getName());
					clientSocket.close();
				}
				catch(Exception e) {
					DataOutputStream out;
					try {
						out = new DataOutputStream(clientSocket.getOutputStream());
					
					String header = null;
					int content_length = 0;
					String content = "<html><body>\n<h1>500: Internal Server Error</h1>";
					content += "</body></html>";
					content_length = content.getBytes().length;
					header = hm.get("Version") + " 500 Interval Server Error\r\n";
					header += "Content-Type: text/html\r\n";
					header += "Content-Length: " + content_length + "\r\n";
					header += "\n";
					out.write(header.getBytes());
					out.write(content.getBytes());
					out.close();
					}
					catch (IOException e1) {
						e1.printStackTrace();
					}
				}
				Q.notifyAll();
			}
		}
	}
}
