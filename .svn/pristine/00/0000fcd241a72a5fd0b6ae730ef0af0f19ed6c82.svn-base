package edu.upenn.cis.cis455.webserver;
import java.io.IOException;
import java.util.Date;
import java.util.Enumeration;

import javax.xml.parsers.ParserConfigurationException;

import static org.junit.Assert.*;

import org.junit.Before;
import org.junit.Test;
import org.xml.sax.SAXException;

public class Session_Test_Cases {

	Context context;
	Session session;
	String session_id;
	long last_accessed_time;

	@Before
	public void initialize() throws ParserConfigurationException, SAXException, IOException {
		context = new Context();
		session_id = "ABCDEFGHIJK";
		last_accessed_time = new Date().getTime();
		session = new Session(session_id, last_accessed_time, context);
	}

	@Test
	public void test_getId_getCreationTime_getServletContext() {
		assertEquals("ABCDEFGHIJK", session.getId()); //Test the functionality of getId()
		assertEquals(last_accessed_time, session.getCreationTime()); //Test the functionality of getCreationTime()
		assertEquals(context, session.getServletContext());
	}

	@Test
	public void test_setMaxInactiveTimeInterval_getMaxInactiveTimeInterval() {
		session.setMaxInactiveInterval(10);
		assertEquals(10, session.getMaxInactiveInterval()); //Test the functionality of setMaxInactiveTimeInterval and getMaxInactiveInterval()
	}

	@Test
	public void test_setAttribute_getAttribute_getAttributeNames_removeAttribute() {
		session.setAttribute("test_attr1", new String("test_obj1")); //Test the functionality of setAttribute()
		session.setAttribute("test_attr2", new String("test_obj2"));
		session.setAttribute("test_attr3", new String("test_obj3"));
		assertEquals(new String("test_obj1"), session.getAttribute("test_attr1")); //Test the functionality of getAttribute()
		session.removeAttribute("test_attr3"); //Test the functionality of removeAttribute()
		assertNull(session.getAttribute("test_attr3")); //Since we removed the attribute, getAttribute should return a null
		Enumeration a = session.getAttributeNames(); //Test the functionality of getAttributeNames
		while(a.hasMoreElements()){
			String param = (String) a.nextElement();
			assertTrue(param.equals("test_attr1") || param.equals("test_attr2"));
		}
	}
	
	@Test
	public void test_isValid() {
		assertEquals(true, session.isValid()); //Test the functionality of isValid
		assertNotEquals(false, session.isValid());
	}
	
	@Test
	public void test_putValue_getValue() {
		session.putValue("test", new String("test_value")); //Test the functionality of putValue
		assertEquals("test_value", session.getValue("test")); //Test the functionality of getValue
	}
	
}