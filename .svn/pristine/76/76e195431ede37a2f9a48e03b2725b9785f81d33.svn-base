package edu.upenn.cis.cis455.webserver;
import java.io.IOException;
import java.net.Socket;
import java.net.UnknownHostException;
import java.text.SimpleDateFormat;
import java.util.AbstractMap;
import java.util.Date;
import java.util.Enumeration;
import java.util.HashMap;
import java.util.Locale;
import java.util.Map.Entry;

import static org.junit.Assert.*;

import org.junit.Before;
import org.junit.Test;

import com.sun.xml.internal.fastinfoset.util.StringArray;

public class Response_Test_Cases {

	Context context;
	Session session;
	Response response;
	Socket clientSocket;
	HashMap<String, String> hm;
	Entry<String, String> entry;
	String session_id;
	long last_accessed_time;
	Request request;
	static boolean first_time = true;
	
	@Before
	public void initialize() throws Exception {
		context = new Context();
		last_accessed_time = new Date().getTime();
		session = null;
		response = new Response();
		hm = new HashMap<String,String>();
		String[] arguments = new String[3];
		arguments[0] = "8080";
		arguments[1] = "/home/cis455/Desktop/dir1/dir2/dir3/root";
		arguments[2] = "/home/cis455/workspace/HW1/src/edu/upenn/cis/cis455/WEB-INF/web.xml";
		entry = new AbstractMap.SimpleEntry<String, String>("/test", "TestServlet");
		if (first_time) { 
			HttpServer.main(arguments);
			first_time = false;
		}
		clientSocket = new Socket("localhost", 8080);
		request = new Request(context, session, response, clientSocket, hm, entry);
	}
	
	@Test
	public void test_addHeader() {
		response.addHeader("test_header", "test_value");
		assertTrue(response.containsHeader("test_header"));
	}
	
	@Test
	public void test_addDateHeader() {
		Long date = new Date().getTime();
		response.setDateHeader("Date", date);
		SimpleDateFormat format = new SimpleDateFormat("EEE, dd MMM yyyy HH:mm:ss z", Locale.US);
		String date_new = format.format(date);
		assertEquals(date_new, response.headers.get("Date"));
	}
	
	@Test
	public void test_getCharacterEncoding() {
		assertEquals("ISO-8859-1", response.getCharacterEncoding());
	}
	
	@Test
	public void test_setContentLength() {
		response.setContentLength(1000);
		assertEquals(new String("1000"), response.headers.get("Content-Length"));
	}
	
	@Test
	public void test_isCommitted() throws IOException {
		response.flushBuffer();
		assertTrue(response.isCommitted());
	}
	
}
